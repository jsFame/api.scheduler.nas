### Student Signup
POST {{u}}/auth/signup
Content-Type: application/x-www-form-urlencoded

email=tadashiStudent@gmail.com&password=Hiro*2412412###@##P

### Student Signin
POST {{u}}/auth/signin
Content-Type: application/x-www-form-urlencoded

email=tadashiStudent@gmail.com&password=Hiro*2412412###@##P


### Gets events available "others"

GET {{u}}/events/available

> {%
  // function getTodayInISO() {
  //   const today = new Date();
  //   const year = today.getFullYear();
  //   const month = String(today.getMonth() + 1).padStart(2, '0'); // Months are 0-indexed, so add 1
  //   const day = String(today.getDate()).padStart(2, '0');
  //   return `${year}-${month}-${day}`;
  // }
  function getTodayInISO() {
    return new Date().toISOString().split('T')[0];
  }

  const todayInISO = getTodayInISO();
  client.log(todayInISO);
  client.global.set("today", todayInISO)
%}

### Get Slots for the event

GET {{u}}/timeslots?eventId={{deanEventId}}&available=true

> {%

  function isTimeSlotAfterNow(startTimeISO) {
    const startTime = new Date(startTimeISO);
    const now = new Date();

    const startTimeHour = startTime.getUTCHours();
    const startTimeMinute = startTime.getUTCMinutes();

    const nowHour = now.getUTCHours();
    const nowMinute = now.getUTCMinutes();

    client.log(JSON.stringify({ nowHour, startTimeHour }))

    return startTimeHour > nowHour //|| (startTimeHour === nowHour && startTimeMinute > nowMinute);
  }

  events = response.body
  client.log(events)

  flagSet = false

  for (i = 0; i < events.length; i++) {
    e = events[i]

    if (e.available && isTimeSlotAfterNow(e.startTime)) {
      client.log("timesSlotid set " + e.id + " " + e.startTime)
      client.global.set("timeSlotId", e.id)
      flagSet=true
      break
    }
  }
  client.assert(flagSet, "got timeslots")

%}

### Schedule a timeslot for future

POST {{u}}/calendars
Content-Type: application/json

{
  "timeSlotId": "{{timeSlotId}}",
  "eventId": "{{deanEventId}}",
  "date": "{{today}}"
}

> {%

  client.log(client.global.get("today"))

  calendar = response.body
  client.log(calendar)

  client.test("expected res", () => {
    client.assert(response.status == 201, "calendar created")
  })
  client.assert(calendar, "calendar is not empty")

%}

###  Student Reviews His Calendar

GET {{u}}/calendars/today

> {%

  calendar = response.body
  client.log(calendar)
  client.assert(calendar.length > 0, "calendar is not empty")



%}



